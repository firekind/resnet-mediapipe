type: "ResNetSubgraph"

input_stream: "in"
output_stream: "CLASSIFICATIONS:out"

# resizing the image
node: {
    calculator: "ImageTransformationCalculator"
    input_stream: "IMAGE:in"
    output_stream: "IMAGE:resized_image"
    node_options: {
        [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
            output_width: 224
            output_height: 224
        }
    }
}

# converting image to tflite tensors, normalized to [0, 1]
node: {
    calculator: "TfLiteConverterCalculator"
    input_stream: "IMAGE:resized_image"
    output_stream: "TENSORS:image_tensors"
    options: {
        [mediapipe.TfLiteConverterCalculatorOptions.ext] {
            zero_center: true
        }    
    }
}

node: {
    calculator: "HWCToCHWCalculator"
    input_stream: "IN_TENSOR:image_tensors"
    output_stream: "OUT_TENSOR:permuted_tensors"
}

# running tensorflow lite model
node: {
    calculator: "TfLiteInferenceCalculator"
    input_stream: "TENSORS:permuted_tensors"
    output_stream: "TENSORS:class_tensors"
    node_options: {
        [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
            model_path: "resnet-mediapipe/models/resnet18.tflite"
        }
    }
}

# converting class tensors to class labels
node: {
    calculator: "TfLiteTensorsToClassificationCalculator"
    input_stream: "TENSORS:class_tensors"
    output_stream: "CLASSIFICATIONS:out"
    options: {
        [mediapipe.TfLiteTensorsToClassificationCalculatorOptions.ext] {
            top_k: 1
            min_score_threshold: 0.1
            label_map_path: "resnet-mediapipe/models/labelmap.txt"
        }
    }
}